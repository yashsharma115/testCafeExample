"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const url_1 = require("url");
const base_1 = __importDefault(require("../base"));
const runtime_info_1 = __importDefault(require("./runtime-info"));
const config_1 = __importDefault(require("./config"));
const local_chrome_1 = require("./local-chrome");
const client_functions_1 = require("../../../utils/client-functions");
const cdp_client_1 = require("./cdp-client");
const cdp_1 = require("../../../../../native-automation/utils/cdp");
const debug_loggers_1 = require("../../../../../utils/debug-loggers");
const types_1 = require("../../../../../native-automation/types");
const delay_1 = __importDefault(require("../../../../../utils/delay"));
const convert_1 = require("../../../../../native-automation/utils/convert");
const MIN_AVAILABLE_DIMENSION = 50;
exports.default = Object.assign(Object.assign({}, base_1.default), { getConfig(name) {
        return (0, config_1.default)(name);
    },
    async getCurrentCDPSession(browserId) {
        const { browserClient } = this.openedBrowsers[browserId];
        const cdpClient = await browserClient.getActiveClient();
        return cdpClient;
    },
    _getBrowserProtocolClient(runtimeInfo) {
        return runtimeInfo.browserClient;
    },
    async _createRunTimeInfo(hostName, config, disableMultipleWindows) {
        return runtime_info_1.default.create(hostName, config, disableMultipleWindows);
    },
    _setUserAgentMetaInfoForEmulatingDevice(browserId, config) {
        const { emulation, deviceName } = config;
        const isDeviceEmulation = emulation && deviceName;
        if (!isDeviceEmulation)
            return;
        const metaInfo = `Emulating ${deviceName}`;
        const options = {
            appendToUserAgent: true,
        };
        this.setUserAgentMetaInfo(browserId, metaInfo, options);
    },
    async _setupNativeAutomation({ browserClient, runtimeInfo, nativeAutomationOptions }) {
        const nativeAutomation = await browserClient.createMainWindowNativeAutomation(nativeAutomationOptions);
        await nativeAutomation.start();
        runtimeInfo.nativeAutomation = nativeAutomation;
    },
    async _startChrome(startOptions, pageUrl) {
        if (startOptions.isContainerized)
            await (0, local_chrome_1.startOnDocker)(pageUrl, startOptions);
        else
            await (0, local_chrome_1.start)(pageUrl, startOptions);
    },
    async openBrowser(browserId, pageUrl, config, additionalOptions) {
        var _a;
        const parsedPageUrl = (0, url_1.parse)(pageUrl);
        const runtimeInfo = await this._createRunTimeInfo(parsedPageUrl.hostname, config, additionalOptions.disableMultipleWindows);
        runtimeInfo.browserName = this._getBrowserName();
        runtimeInfo.browserId = browserId;
        runtimeInfo.providerMethods = {
            resizeLocalBrowserWindow: (...args) => this.resizeLocalBrowserWindow(...args),
            reportWarning: (...args) => this.reportWarning(browserId, ...args),
        };
        //NOTE: A not-working tab is opened when the browser start in the docker so we should create a new tab.
        await this._startChrome(Object.assign({ isNativeAutomation: additionalOptions.nativeAutomation }, runtimeInfo), pageUrl);
        await this.waitForConnectionReady(browserId);
        runtimeInfo.viewportSize = await this.runInitScript(browserId, client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);
        runtimeInfo.activeWindowId = null;
        runtimeInfo.windowDescriptors = {};
        const browserClient = new cdp_client_1.BrowserClient(runtimeInfo);
        this.openedBrowsers[browserId] = runtimeInfo;
        if (additionalOptions.nativeAutomation)
            await this._setupNativeAutomation({ browserId, browserClient, runtimeInfo, nativeAutomationOptions: (0, convert_1.toNativeAutomationSetupOptions)(additionalOptions, config.headless) });
        if (additionalOptions.nativeAutomation || !additionalOptions.disableMultipleWindows)
            runtimeInfo.activeWindowId = ((_a = runtimeInfo === null || runtimeInfo === void 0 ? void 0 : runtimeInfo.nativeAutomation) === null || _a === void 0 ? void 0 : _a.windowId) || this.calculateWindowId();
        await browserClient.initMainWindowCdpClient();
        await this._ensureWindowIsExpanded(browserId, runtimeInfo.viewportSize);
        this._setUserAgentMetaInfoForEmulatingDevice(browserId, runtimeInfo.config);
        (0, debug_loggers_1.chromeBrowserProviderLogger)('browser opened %s', browserId);
    },
    async closeBrowser(browserId, closingInfo = {}) {
        const runtimeInfo = this.openedBrowsers[browserId];
        if (runtimeInfo.nativeAutomation)
            await runtimeInfo.nativeAutomation.dispose();
        if (runtimeInfo.browserClient.isHeadlessTab())
            await runtimeInfo.browserClient.closeTab();
        else
            await this.closeLocalBrowser(browserId);
        if (os_family_1.default.mac || runtimeInfo.config.headless)
            await (0, local_chrome_1.stop)(runtimeInfo);
        if (runtimeInfo.tempProfileDir && !closingInfo.isRestarting)
            await runtimeInfo.tempProfileDir.dispose();
        delete this.openedBrowsers[browserId];
        (0, debug_loggers_1.chromeBrowserProviderLogger)('browser closed %s', browserId);
    },
    async resizeWindow(browserId, width, height, currentWidth, currentHeight) {
        const runtimeInfo = this.openedBrowsers[browserId];
        if (runtimeInfo.config.mobile)
            await runtimeInfo.browserClient.updateMobileViewportSize();
        else {
            runtimeInfo.viewportSize.width = currentWidth;
            runtimeInfo.viewportSize.height = currentHeight;
        }
        await runtimeInfo.browserClient.resizeWindow({ width, height });
    },
    async maximizeWindowNativeAutomation(browserId) {
        const { browserClient } = this.openedBrowsers[browserId];
        await browserClient.maximizeWindowNativeAutomation();
    },
    async resizeBounds(browserId, width, height, currentWidth, currentHeight) {
        const { browserClient } = this.openedBrowsers[browserId];
        await browserClient.resizeBounds({ width, height, currentWidth, currentHeight });
    },
    async startCapturingVideo(browserId) {
        const { browserClient } = this.openedBrowsers[browserId];
        await browserClient.startCapturingVideo();
    },
    async stopCapturingVideo(browserId) {
        const { browserClient } = this.openedBrowsers[browserId];
        await browserClient.stopCapturingVideo();
    },
    async getVideoFrameData(browserId) {
        const { browserClient } = this.openedBrowsers[browserId];
        return browserClient.getVideoFrameData();
    },
    async hasCustomActionForBrowser(browserId) {
        const { config, browserClient } = this.openedBrowsers[browserId];
        const client = await browserClient.getActiveClient();
        return {
            hasCloseBrowser: true,
            hasResizeWindow: !!client && (config.emulation || config.headless),
            hasMaximizeWindow: !!client && config.headless,
            hasTakeScreenshot: !!client,
            hasChromelessScreenshots: !!client,
            hasGetVideoFrameData: !!client,
            hasCanResizeWindowToDimensions: false,
        };
    },
    async _ensureWindowIsExpanded(browserId, { height, width, availableHeight, availableWidth, outerWidth, outerHeight }) {
        if (height < MIN_AVAILABLE_DIMENSION || width < MIN_AVAILABLE_DIMENSION) {
            const newHeight = Math.max(availableHeight, MIN_AVAILABLE_DIMENSION);
            const newWidth = Math.max(Math.floor(availableWidth / 2), MIN_AVAILABLE_DIMENSION);
            await this.resizeWindow(browserId, newWidth, newHeight, outerWidth, outerHeight);
        }
    },
    async openFileProtocol(browserId, url) {
        const cdpClient = await this.getCurrentCDPSession(browserId);
        await (0, cdp_1.navigateTo)(cdpClient, url);
    },
    async dispatchNativeAutomationEvent(browserId, type, options) {
        const cdpClient = await this.getCurrentCDPSession(browserId);
        await (0, cdp_1.dispatchEvent)(cdpClient, type, options);
    },
    async dispatchNativeAutomationEventSequence(browserId, eventSequence) {
        const cdpClient = await this.getCurrentCDPSession(browserId);
        for (const event of eventSequence) {
            if (event.type === types_1.EventType.Delay)
                await (0, delay_1.default)(event.options.delay);
            else
                await (0, cdp_1.dispatchEvent)(cdpClient, event.type, event.options);
        }
    },
    supportNativeAutomation() {
        return true;
    },
    getNativeAutomation(browserId) {
        const runtimeInfo = this.openedBrowsers[browserId];
        return runtimeInfo.nativeAutomation;
    },
    async getNewWindowIdInNativeAutomation(browserId) {
        const runtimeInfo = this.openedBrowsers[browserId];
        return runtimeInfo.nativeAutomation.getNewWindowIdInNativeAutomation();
    } });
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,